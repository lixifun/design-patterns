package fun.lixi.study.designpatterns.p2.p2d6;

/**
 * 策略模式是一种定义一系列算法的方法，
 * 从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用
 * 所有的算法，减少了各种算法类与使用类之间的耦合
 * <p>
 * 策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试
 * <p>
 * 当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。
 * 将这些行为封装在一个个独立的 Strategy 类中，可以在使用这些行为的类(客户端)中消除条件语句。
 * <p>
 * 策略模式封装了变化。
 * <p>
 * 策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程
 * 中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的 可能性
 * <p>
 * 任何需求的变更都是需要成本的
 */
public class Summary {
}
